   {{>header}}
  <div class="min-h-screen bg-gray-100">
    <!-- Header -->
    <header class="bg-white shadow-sm">
      <div class="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center">
          <h1 class="text-2xl font-bold text-gray-900">Order Details</h1>
          <div class="flex items-center space-x-4">
            <!-- Download Invoice Button -->
            <button id="downloadInvoiceBtn" data-orderid="{{order._id}}" 
              class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
              Download Invoice
            </button>
            <!-- Status Badge -->
            <span class="px-4 py-2 rounded-full text-sm font-semibold
              {{#if (eq order.status 'Pending')}}bg-yellow-100 text-yellow-800
              {{else if (eq order.status 'Shipped')}}bg-blue-100 text-blue-800
              {{else if (eq order.status 'Out for Delivery')}}bg-purple-100 text-purple-800
              {{else if (eq order.status 'Delivered')}}bg-green-100 text-green-800
              {{else}}bg-red-100 text-red-800{{/if}}">
              {{order.status}}
            </span>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
      <!-- Order Info -->
      <div class="bg-white shadow rounded-lg p-6 mb-8">
        <div class="border-b pb-6 mb-6">
          <h2 class="text-xl font-semibold">Order #{{order._id}}</h2>
          <p class="text-sm text-gray-500 mt-1">Ordered on: {{formatDate order.createdAt}}</p>
        </div>

        <!-- Status Tracker -->
        <div class="relative mb-8">
          <!-- Progress Bar -->
          <div class="h-1 bg-gray-200 absolute w-full top-5"></div>
          <div class="h-1 bg-green-500 absolute transition-all duration-500
            {{#if (eq order.status 'Delivered')}}w-full
            {{else if (eq order.status 'Out for Delivery')}}w-3/4
            {{else if (eq order.status 'Shipped')}}w-1/2
            {{else}}w-1/4{{/if}}
            top-5">
          </div>

          <!-- Status Steps -->
          <div class="flex justify-between relative">
            <!-- Ordered -->
            <div class="flex flex-col items-center">
              <div class="w-10 h-10 rounded-full border-2 flex items-center justify-center
                {{#if order.createdAt}}
                  bg-green-500 border-green-500 text-white
                {{else}}
                  border-gray-300 bg-white text-gray-300
                {{/if}}">
                ðŸ“¦
              </div>
              <p class="text-sm mt-2 font-medium">Ordered</p>
              {{#if order.createdAt}}
                <p class="text-xs text-gray-500">{{formatDate order.createdAt}}</p>
              {{/if}}
            </div>

            <!-- Shipped -->
            <div class="flex flex-col items-center">
              <div class="w-10 h-10 rounded-full border-2 flex items-center justify-center
                {{#if (or (eq order.status 'Shipped') (eq order.status 'Out for Delivery') (eq order.status 'Delivered'))}}
                  bg-green-500 border-green-500 text-white
                {{else}}
                  border-gray-300 bg-white text-gray-300
                {{/if}}">
                ðŸšš
              </div>
              <p class="text-sm mt-2 font-medium">Shipped</p>
              {{#if order.shippedAt}}
                <p class="text-xs text-gray-500">{{formatDate order.shippedAt}}</p>
              {{/if}}
            </div>

            <!-- Out for Delivery -->
            <div class="flex flex-col items-center">
              <div class="w-10 h-10 rounded-full border-2 flex items-center justify-center
                {{#if (or (eq order.status 'Out for Delivery') (eq order.status 'Delivered'))}}
                  bg-green-500 border-green-500 text-white
                {{else}}
                  border-gray-300 bg-white text-gray-300
                {{/if}}">
                ðŸ›µ
              </div>
              <p class="text-sm mt-2 font-medium">Out for Delivery</p>
              {{#if order.outForDeliveryAt}}
                <p class="text-xs text-gray-500">{{formatDate order.outForDeliveryAt}}</p>
              {{/if}}
            </div>

            <!-- Delivered -->
            <div class="flex flex-col items-center">
              <div class="w-10 h-10 rounded-full border-2 flex items-center justify-center
                {{#if (eq order.status 'Delivered')}}
                  bg-green-500 border-green-500 text-white
                {{else}}
                  border-gray-300 bg-white text-gray-300
                {{/if}}">
                âœ…
              </div>
              <p class="text-sm mt-2 font-medium">Delivered</p>
              {{#if order.deliveredAt}}
                <p class="text-xs text-gray-500">{{formatDate order.deliveredAt}}</p>
              {{/if}}
            </div>
          </div>
        </div>

        <!-- Action Button -->
        <div class="flex justify-end space-x-4">
          {{#if (eq order.status "Delivered")}}         
            <button id="returnOrderBtn" data-orderid="{{order._id}}" 
              class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
              Return Order
            </button>
          {{else}}
            {{#unless (or (eq order.status "Cancelled") (eq order.status "Returned"))}}
              <button id="cancelOrderBtn" data-orderid="{{order._id}}" 
                class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">
                Cancel Order
              </button>
            {{/unless}}
          {{/if}}
        </div>
      </div>

      <!-- Order Details Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Products -->
        <div class="bg-white shadow rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Order Items</h2>
          {{#each order.items}}
            <div class="flex items-center space-x-4 py-4 {{#unless @last}}border-b{{/unless}}">
              <img src="{{this.product.images.[0]}}" alt="{{this.product.name}}" 
                class="w-16 h-16 object-cover rounded">
              <div class="flex-1">
                <h3 class="font-medium">{{this.product.name}}</h3>
                <p class="text-sm text-gray-500">Quantity: {{this.quantity}}</p>
                <p class="text-sm font-medium">â‚¹{{this.subtotal}}</p>
              </div>
            </div>
          {{/each}}
          <div class="mt-4 pt-4 border-t">
            <p class="text-lg font-semibold text-right">Total: â‚¹{{order.total}}</p>
          </div>
        </div>

        <!-- Shipping Details -->
        <div class="bg-white shadow rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Shipping Details</h2>
          <div class="space-y-2">
            <p class="font-medium">{{order.address.name}}</p>
            <p class="text-gray-600">{{order.address.addressLine1}}</p>
            {{#if order.address.addressLine2}}
              <p class="text-gray-600">{{order.address.addressLine2}}</p>
            {{/if}}
            <p class="text-gray-600">
              {{order.address.city}}, {{order.address.state}} {{order.address.pincode}}
            </p>
            <p class="text-gray-600">{{order.address.country}}</p>
            <p class="text-gray-600 flex items-center mt-2">
              <span class="mr-2">ðŸ“ž</span>
              {{order.address.phoneNumber}}
            </p>
          </div>
        </div>
      </div>
    </main>
  </div>
  {{>userFooter}}
  <!-- Add this modal HTML before the closing body tag -->
  <div id="returnModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center">
    <div class="bg-white p-8 rounded-lg shadow-xl w-96">
      <h2 class="text-2xl font-bold mb-4">Return Order</h2>
      <form id="returnForm">
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="returnReason">
            Reason for Return
          </label>
          <select id="returnReason" name="returnReason" class="w-full p-2 border rounded" required>
            <option value="">Select a reason</option>
            <option value="Damaged in Transit">Damaged in Transit</option>
            <option value="Defective Product">Defective Product</option>
            <option value="Not as Described">Not as Described</option>
            <option value="Changed Mind">Changed Mind</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2" for="comments">
            Additional Comments
          </label>
          <textarea id="comments" name="comments" class="w-full p-2 border rounded" rows="3"></textarea>
        </div>
        <div class="flex justify-end gap-4">
          <button type="button" id="cancelReturn" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
            Submit Return
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const cancelBtn = document.getElementById('cancelOrderBtn');
      const returnBtn = document.getElementById('returnOrderBtn');
      const returnModal = document.getElementById('returnModal');
      const cancelReturnBtn = document.getElementById('cancelReturn');
      const returnForm = document.getElementById('returnForm');

      if (cancelBtn) {
        cancelBtn.addEventListener('click', function() {
          const orderId = this.getAttribute('data-orderid');
          Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel it!'
          }).then((result) => {
            if (result.isConfirmed) {
              fetch(`/user/cancelOrder/${orderId}`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                }
              })
              .then(response => response.json())
              .then(data => {
                Swal.fire({
                  title: 'Cancelled!',
                  text: data.message,
                  icon: 'success'
                }).then(() => {
                  window.location.reload();
                });
              })
              .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                  title: 'Error!',
                  text: 'Something went wrong while cancelling the order.',
                  icon: 'error'
                });
              });
            }
          });
        });
      }

      if (returnBtn) {
        returnBtn.addEventListener('click', function() {
          returnModal.classList.remove('hidden');
          returnModal.classList.add('flex');
        });
      }

      if (cancelReturnBtn) {
        cancelReturnBtn.addEventListener('click', function() {
          returnModal.classList.add('hidden');
          returnModal.classList.remove('flex');
        });
      }

      if (returnForm) {
        returnForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const orderId = returnBtn.getAttribute('data-orderid');
          const returnReason = document.getElementById('returnReason').value;
          const comments = document.getElementById('comments').value;

          fetch(`/user/returnOrder/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              reason: returnReason,
              comments: comments
            })
          })
          .then(response => response.json())
          .then(data => {
            returnModal.classList.add('hidden');
            returnModal.classList.remove('flex');
            
            Swal.fire(
              'Return Requested!',
              data.message,
              'success'
            ).then(() => {
              window.location.reload();
            });
          })
          .catch(error => {
            Swal.fire(
              'Error!',
              'Something went wrong.',
              'error'
            );
          });
        });
      }

      document.getElementById('downloadInvoiceBtn').addEventListener('click', function() {
        const orderId = this.getAttribute('data-orderid');
        
        // Show loading state
        Swal.fire({
          title: 'Generating Invoice...',
          allowOutsideClick: false,
          didOpen: () => {
            Swal.showLoading();
          }
        });

        fetch(`/user/download-invoice/${orderId}`)
          .then(response => response.blob())
          .then(blob => {
            // Create blob link to download
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `invoice-${orderId}.pdf`;
            
            // Append to html link element page
            document.body.appendChild(a);
            
            // Start download
            a.click();
            
            // Clean up and remove the link
            a.remove();
            window.URL.revokeObjectURL(url);
            
            Swal.close();
          })
          .catch(error => {
            console.error('Error:', error);
            Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Failed to download invoice!'
            });
          });
      });
    });
  </script>