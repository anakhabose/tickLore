<body class="bg-gray-100 min-h-screen">
 {{>header}}
    <div class="flex flex-col md:flex-row min-h-screen bg-gray-50">
        <!-- Sidebar Navigation -->
      
      {{> userSidebar}}

        <!-- Main Content -->
        <main class="flex-1 p-6">
            <div class="max-w-2xl mx-auto">
                <div class="flex items-center justify-between mb-6">
    <div class="flex items-center gap-4">
      <div class="relative">
          <img id="profile-image" src={{users.profileImage}} alt="Profile" class="rounded-full w-20 h-20">
          <label for="profile-image-upload" class="absolute bottom-0 right-0 bg-yellow-600 text-white rounded-full p-1 cursor-pointer hover:bg-yellow-700 z-10">
            <input type="file" class="hidden" name="profileImage" id="profile-image-upload" accept="image/*">
            <span class="text-sm">&#9998;</span>
          </label>
        </div>
        
        <div>
            <p class="text-sm text-gray-500">Welcome!</p>
            <p class="font-semibold">{{users.name}}</p>
        </div>
    </div>
</div>

<div class="bg-white p-8 rounded-lg shadow-lg w-full max-w-3xl mx-auto">
    <h1 class="text-2xl font-semibold mb-6">Edit Your Profile</h1>
 <form id="profileForm" class="space-y-6" enctype="multipart/form-data" >
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="space-y-2">
      <label for="firstName" class="text-sm font-medium">First Name</label>
      <input id="firstName" name="name" type="text" value="{{users.name}}" class="w-full px-4 py-2 border rounded">
    </div>
   <div class="space-y-2">
  <label for="gender" class="text-sm font-medium">Gender</label>
  <select id="gender" name="gender" class="w-full px-4 py-2 border rounded">
    <option value="Male" {{#if (eq users.gender 'Male')}}selected{{/if}}>Male</option>
    <option value="Female" {{#if (eq users.gender 'Female')}}selected{{/if}}>Female</option>
    <option value="Other" {{#if (eq users.gender 'Other')}}selected{{/if}}>Other</option>
  </select>
</div>

    <div class="space-y-2">
      <label for="email" class="text-sm font-medium">Email</label>
      <input id="email" name="email" type="email" value="{{users.email}}" class="w-full px-4 py-2 border rounded" disabled>
    </div>
    <div class="space-y-2">
      <label for="city" class="text-sm font-medium">Phone Number</label>
      <input id="phoneNumber" name="phoneNumber" type="text" value="{{users.phoneNumber}}" class="w-full px-4 py-2 border rounded">
    </div>
  </div>

  <div class="flex justify-end gap-4">
    <button type="button" class="px-4 py-2 border rounded bg-gray-100 hover:bg-gray-200">Cancel</button>
    <button type="submit" class="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600">Save Changes</button>
  </div>
</form>


</div>

            </div>
             <!-- Cropper Modal -->
  <div id="cropper-modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white p-6 rounded-lg">
      <div class="w-96 h-96">
        <img id="cropper-image" src="" class="max-w-full max-h-full">
      </div>
      <div class="flex justify-end mt-4 space-x-2">
        <button id="crop-btn" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Crop</button>
        <button id="cancel-btn" class="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">Cancel</button>
      </div>
    </div>
  </div>
        </main>
    </div>
  
  {{>userFooter}}


  <script>
     const profileImageUpload = document.getElementById('profile-image-upload');
  const profileImage = document.getElementById('profile-image');
  const cropperModal = document.getElementById('cropper-modal');
  const cropperImage = document.getElementById('cropper-image');
  const cropBtn = document.getElementById('crop-btn');
  const cancelBtn = document.getElementById('cancel-btn');
  let cropper;

  profileImageUpload.addEventListener('change', function () {
    console.log("File input triggered"); 

  const file = this.files[0];
  if (file) {
    console.log("File selected:", file); // Debug log
    const reader = new FileReader();
    reader.onload = function (e) {

      console.log("File read successfully");
      console.log("Loaded image URL:", e.target.result); // Debug log
      cropperImage.src = e.target.result;
      cropperModal.classList.remove('hidden');
      
      // Additional error handling
      try {
        if (cropper) cropper.destroy(); // Ensure no duplication
        cropper = new Cropper(cropperImage, {
          aspectRatio: 1,
          viewMode: 1,
        });
        console.log("Cropper initialized successfully"); // Debug log
      } catch (error) {
        console.error("Error initializing Cropper:", error);
      }
    };
    reader.onerror = function(error) {
      console.error("Error reading file:", error);
    };
    reader.readAsDataURL(file);
  } else {
    console.error("No file selected.");
  }
});
  cropBtn.addEventListener('click', function () {
  console.log("Crop button clicked");
  const canvas = cropper.getCroppedCanvas();
  const croppedImage = canvas.toDataURL(); // Convert to base64
  console.log("Cropped image data:", croppedImage);
  profileImage.src = croppedImage; // Update profile image
  cropper.destroy(); // Clean up cropper
  cropperModal.classList.add('hidden'); // Hide modal
});


  cancelBtn.addEventListener('click', function () {
    if (cropper) cropper.destroy();
    cropperModal.classList.add('hidden');
  });
        
  document.getElementById('profileForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
     
 // Debug: Log form data contents
 for (let [key, value] of formData.entries()) {
   console.log(key, value);
 }
    
    // Add the file to FormData if it exists
    const fileInput = document.getElementById('profile-image-upload');
    if (fileInput.files[0]) {
        formData.append('profileImage', fileInput.files[0]);
    }


const firstName = document.getElementById('firstName').value.trim();
  
  if (!firstName) {
    Swal.fire({
      title: 'Error',
      text: 'First name is required.',
      icon: 'error',
      confirmButtonText: 'OK'
    });
    return;
  }

  // Check if first name contains only letters and spaces
  const namePattern = /^[A-Za-z\s]+$/;
  if (!namePattern.test(firstName)) {
    Swal.fire({
      title: 'Error',
      text: 'First name must only contain letters and spaces.',
      icon: 'error',
      confirmButtonText: 'OK'
    });
    return;
  }

  // Check for minimum and maximum length (e.g., 3-50 characters)
  if (firstName.length < 3 || firstName.length > 20) {
    Swal.fire({
      title: 'Error',
      text: 'First name must be between 3 and 20 characters.',
      icon: 'error',
      confirmButtonText: 'OK'
    });
    return;
  }


   
    try {
  const response = await fetch('/user/editProfile', {
    method: 'PATCH',
    headers: {
      'Accept': 'application/json',
    },
    body: formData,
  });

  const result = await response.json();
  console.log('Server Response:', response.status, result);


  if (response.status === 200) {
    if (result.imageUrl) {
      const imagePreview = document.getElementById('preview');
      imagePreview.src = result.imageUrl;
    }
    
    Swal.fire({
      title: 'Success',
      text: 'Profile updated successfully!',
      icon: 'success',
      confirmButtonText: 'OK'
    });
  } else if (response.status === 400) {
    Swal.fire({
      title: 'Validation Error',
      text: result.message || 'Please check your input.',
      icon: 'error',
      confirmButtonText: 'OK'
    });
  } else {
    throw new Error(result.message || 'Server error');
  }
} catch (error) {
  console.error('Error:', error);
  Swal.fire({
    title: 'Error',
    text: 'Unable to update profile. Please try again later.',
    icon: 'error',
    confirmButtonText: 'OK'
  });
}
  });

document.getElementById('profile-image-upload').addEventListener('click', function(e) {
  console.log('Click detected on file input');
});

document.querySelector('label[for="profile-image-upload"]').addEventListener('click', function(e) {
  console.log('Click detected on label');
});

</script>


</body>
