

    <!-- Header -->
     {{>header}}

    <!-- Main Content -->
   
    <main class="container mx-auto px-4 py-10">


       <!-- Breadcrumbs -->
<div class="py-2 px-4">
  <nav class="flex text-sm font-medium text-gray-500 space-x-2">
    <a href="/user/home" class="hover:text-yellow-600">Home</a>

    <span>/</span>
    <span class="text-gray-900">{{product.productName}}</span>
  </nav>
</div>

    <div class="grid gap-10 md:grid-cols-2">
    <div class="relative flex bg-white p-1 -mt-2">
        <!-- Small Images Container -->
        <div class="flex flex-col justify-center ml-4 gap-4">
            <img 
                src="{{product.images.[0]}}" 
                alt="Small Image 1" 
                class="object-contain h-20 w-20 cursor-pointer" 
                onclick="changeImage('{{product.images.[0]}}')" 
            />
            <img 
                src="{{product.images.[1]}}" 
                alt="Small Image 2" 
                class="object-contain h-20 w-20 cursor-pointer" 
                onclick="changeImage('{{product.images.[1]}}')" 
            />
            <img 
                src="{{product.images.[2]}}" 
                alt="Small Image 3" 
                class="object-contain h-20 w-20 cursor-pointer" 
                onclick="changeImage('{{product.images.[2]}}')" 
            />
            <img 
                src="{{product.images.[3]}}" 
                alt="Small Image 4" 
                class="object-contain h-20 w-20 cursor-pointer" 
                onclick="changeImage('{{product.images.[3]}}')" 
            />
        </div>

        <!-- Big Image Container with Zoom Effect -->
        <div class="flex justify-center items-center flex-grow">
            <div class="zoom-container relative overflow-hidden">
                <img 
                    id="bigImage" 
                    src="{{product.images.[0]}}" 
                    alt="Apple Smart Watch" 
                    class="object-contain h-96 w-85 transition-transform duration-200 ease-in-out" 
                />
                <div 
                    class="zoom-lens absolute border-2 border-black bg-black bg-opacity-20 cursor-crosshair hidden"
                    style="width: 100px; height: 100px;">
                </div>
            </div>
        </div>
    </div>


     
            <!-- Product Details -->
            
      <div class="space-y-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-800">{{product.productName}}</h1>
            
        </div>
         <!-- Display average rating -->
      <div class="flex items-center mt-2">
        <span class="text-yellow-500 text-lg">★★★★☆</span>
        <p class="ml-2 text-gray-700">(4.5 out of 5)</p>
        <p class="ml-2 text-gray-600">| Based on 120 reviews</p>
      </div>

        <div class="mt-4">
            {{#if product.discountedPrice}}
                <div class="flex flex-col">
                    <div class="flex items-center gap-2">
                        <span class="text-2xl font-semibold text-red-600">₹{{product.discountedPrice}}</span>
                        <span class="text-gray-400 font-semibold line-through">₹{{product.price}}</span>
                    </div>
                   
                    <div class="flex items-center gap-2">
                        <span class="bg-green-200 text-green-800 font-semibold text-xs px-2 py-1 rounded-lg">
                            Special Offer: {{calculateDiscount product.price product.discountedPrice}}% OFF
                        </span>
                    </div>
                </div>
            {{else}}
                <span class="text-2xl font-semibold text-red-600">₹{{product.price}}</span>
            {{/if}}
        </div>

        <p class="text-xl font-bold text-gray-900">Description</p>
        <div class="text-gray-700 space-y-4">
            <p>{{product.description}}</p>
        </div>
         <div class="mt-4">
            {{#if (eq product.stock 0)}}
                <div class="bg-red-100 text-red-800 font-semibold px-3 py-1 rounded-lg inline-flex items-center">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    Out of Stock
                </div>
            {{else if (lte product.stock 10)}}
                <div class="bg-yellow-100 text-yellow-800 font-semibold px-3 py-1 rounded-lg inline-flex items-center">
                    <i class="fas fa-exclamation-triangle mr-2"></i>
                    Low Stock - Only {{product.stock}} left
                </div>
            {{/if}}
        </div>
         


        <!-- Quantity Section -->
      <div class="flex items-center space-x-6">
          <!-- Label -->
          <label for="quantity" class="text-lg font-semibold text-yellow-500">Quantity:</label>

          <!-- Quantity Controller -->
          <div class="flex items-center border border-yellow-500 rounded-full shadow-lg overflow-hidden">
    <!-- Decrease Button -->
    <button id="decrease" 
        class="bg-yellow-500 text-black px-4 py-2 font-bold hover:bg-yellow-600 focus:ring-2 focus:ring-yellow-400 focus:outline-none transition">
        -
    </button>
    <!-- Input Field -->
    <input id="quantity" 
        type="number" 
        value="1" 
        min="1" 
        max="4"
        class="w-16 text-center bg-white text-black font-medium focus:ring-0 focus:outline-none border-none" />
    <!-- Increase Button -->
    <button id="increase" 
        class="bg-yellow-500 text-black px-4 py-2 font-bold hover:bg-yellow-600 focus:ring-2 focus:ring-yellow-400 focus:outline-none transition">
        +
    </button>
  </div>

    </div>


 <button
    class="w-full md:w-auto bg-yellow-600 text-white px-4 py-2 rounded-md hover:bg-yellow-500"
    onclick="redirectToCart('{{product._id}}')">
    Add to Cart
</button>

<button
    onclick="addToWishlist('{{product._id}}')"
    class="w-full md:w-auto bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-500">
    Add to Wishlist
</button>

   <!-- Write a review -->
      {{!-- <div class="mt-4">
       <label for="reviewText" class="block text-lg font-semibold text-gray-800">Write a Review:</label>
       <textarea
         id="reviewText"
         rows="4"
         placeholder="Share your thoughts about the product"
         class="w-full p-2 mt-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500"></textarea>
       <div class="flex items-center space-x-2 mt-2">
         <label class="text-lg font-semibold text-gray-800">Your Rating:</label>
         <div class="flex space-x-1">
           <span class="text-gray-400 hover:text-yellow-500 cursor-pointer">★</span>
           <span class="text-gray-400 hover:text-yellow-500 cursor-pointer">★</span>
           <span class="text-gray-400 hover:text-yellow-500 cursor-pointer">★</span>
           <span class="text-gray-400 hover:text-yellow-500 cursor-pointer">★</span>
           <span class="text-gray-400 hover:text-yellow-500 cursor-pointer">★</span>
         </div>
       </div>
       <button
         id="submitReview"
         class="bg-yellow-600 text-white px-4 py-2 mt-4 rounded-md hover:bg-yellow-500 transition">
         Submit Review
       </button>
     </div> --}}

     <!-- Review List -->
     {{!-- <div class="mt-6">
       <h3 class="text-lg font-bold text-gray-900">Recent Reviews:</h3>
       <ul class="space-y-4 mt-4">
         <li class="border-b border-gray-300 pb-4">
           <div class="flex items-center justify-between">
             <p class="font-semibold text-gray-800">John Doe</p>
             <span class="text-yellow-500">★★★★★</span>
           </div>
           <p class="text-gray-700 mt-2">Great product! Highly recommend it.</p>
         </li>
         <li class="border-b border-gray-300 pb-4">
           <div class="flex items-center justify-between">
             <p class="font-semibold text-gray-800">Jane Smith</p>
             <span class="text-yellow-500">★★★★☆</span>
           </div>
           <p class="text-gray-700 mt-2">Good quality but slightly expensive.</p>
         </li>
       </ul>
     </div> --}}

   </div> 

   </div>
   <!-- Recommended Products Section -->
   <div class="max-w-7xl mx-auto p-6">
       <div class="flex justify-between items-center mb-6">
           <h1 class="text-2xl font-bold">Recommended Products</h1>
       </div>

       <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
           {{#each recommendedProducts}}
               {{#unless this.deleted}}
               <a href="/user/viewProducts/{{this._id}}" class="no-underline">
                   <div class="bg-white shadow rounded-lg p-4 flex flex-col items-center hover:shadow-lg transition-shadow">
                       <div class="flex items-center justify-center mb-4">
                           <img 
                               src="{{this.images.[0]}}" 
                               alt="{{this.name}}" 
                               class="h-48 object-contain"
                           />
                       </div>
                       <h2 class="text-lg font-semibold text-center">{{this.productName}}</h2>
                       <p class="text-lg font-bold text-center">Rs.{{this.price}}</p>
                   </div>
               </a>
               {{/unless}}
           {{/each}}
       </div>
   </div>



   </main>

   <!-- Footer -->
   {{>userFooter}}

<script>

  function changeImage(newSrc) {
        // Update the main image when a small image is clicked
        document.getElementById('bigImage').src = newSrc;
    }

       const zoomContainer = document.querySelector('.zoom-container');
    const zoomLens = document.querySelector('.zoom-lens');
    const bigImage = document.getElementById('bigImage');

    zoomContainer.addEventListener('mousemove', function (e) {
        const containerRect = zoomContainer.getBoundingClientRect();
        const x = e.pageX - containerRect.left;
        const y = e.pageY - containerRect.top;

        const lensWidth = zoomLens.offsetWidth;
        const lensHeight = zoomLens.offsetHeight;

        // Move the lens based on mouse position
        let lensX = x - lensWidth / 2;
        let lensY = y - lensHeight / 2;

        // Prevent lens from going out of bounds
        if (lensX < 0) lensX = 0;
        if (lensY < 0) lensY = 0;
        if (lensX > zoomContainer.offsetWidth - lensWidth) lensX = zoomContainer.offsetWidth - lensWidth;
        if (lensY > zoomContainer.offsetHeight - lensHeight) lensY = zoomContainer.offsetHeight - lensHeight;

        zoomLens.style.left = lensX + 'px';
        zoomLens.style.top = lensY + 'px';

        // Zoom in effect
        const zoomFactor = 2; // Adjust this value to control the zoom level
        bigImage.style.transform = `scale(${zoomFactor})`;
        bigImage.style.transformOrigin = `${(x / zoomContainer.offsetWidth) * 100}% ${(y / zoomContainer.offsetHeight) * 100}%`;
    });

    zoomContainer.addEventListener('mouseleave', function () {
        zoomLens.style.display = 'none';
        bigImage.style.transform = 'scale(1)';
    });

    zoomContainer.addEventListener('mouseenter', function () {
        zoomLens.style.display = 'block';
    });

    // JavaScript to handle quantity increase and decrease
   const decreaseBtn = document.getElementById('decrease');
  const increaseBtn = document.getElementById('increase');
  const quantityInput = document.getElementById('quantity');

  // Decrease quantity
  decreaseBtn.addEventListener('click', () => {
    const currentValue = parseInt(quantityInput.value);
    if (currentValue > 1) {
      quantityInput.value = currentValue - 1;
    }
  });

  // Increase quantity
  increaseBtn.addEventListener('click', () => {
    const currentValue = parseInt(quantityInput.value);
    if (currentValue < 4) {
      quantityInput.value = currentValue + 1;
    }
  });

  // Prevent manual entry beyond limits
  quantityInput.addEventListener('input', () => {
    const value = parseInt(quantityInput.value);
    if (value > 4) {
      quantityInput.value = 4;
    } else if (value < 1) {
      quantityInput.value = 1;
    }
  });

    
async function redirectToCart(productId) {
    try {
        // Get quantity and validate
        const quantity = parseInt(document.getElementById('quantity').value);
        if (isNaN(quantity) || quantity < 1) {
            throw new Error('Invalid quantity');
        }

        // Make API call
        const response = await fetch('/user/addToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
               
            },
            credentials: 'same-origin', 
            body: JSON.stringify({ 
                productId, 
                quantity 
            })
        });

        const data = await response.json();

        // Handle different response scenarios
        if (response.status === 401) {
            return Swal.fire({
                title: 'Authentication Required',
                text: 'Please log in to add items to your cart',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Login',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/user/login';
                }
            });
        }

        if (!response.ok) {
            throw new Error(data.error || data.message || 'Failed to add item to cart');
        }

        // Success case
        return Swal.fire({
            title: 'Success!',
            text: 'Item added to cart successfully',
            icon: 'success',
            showCancelButton: true,
            confirmButtonText: 'View Cart',
            cancelButtonText: 'Continue Shopping'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/user/cart';
            }
        });

    } catch (error) {
        console.error('Add to cart error:', error);
        return Swal.fire({
            title: 'Error',
            text: error.message || 'Failed to add item to cart',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}

async function addToWishlist(productId) {
    try {
        const response = await fetch('/user/addToWishlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId })
        });

        const data = await response.json();

        if (!response.ok) {
            if (data.requireLogin) {
                // Handle login required
                Swal.fire({
                    title: 'Please Login',
                    text: 'You need to be logged in to add items to your wishlist',
                    icon: 'info',
                    showCancelButton: true,
                    confirmButtonText: 'Login Now',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/user/login';
                    }
                });
            } else if (data.alreadyInWishlist) {
                // Handle already in wishlist
                Swal.fire({
                    title: 'Already in Wishlist',
                    text: 'This product is already in your wishlist',
                    icon: 'info',
                    confirmButtonText: 'OK'
                });
            } else {
                // Handle other errors
                throw new Error(data.error || 'Failed to add to wishlist');
            }
            return;
        }

        // Success case
        Swal.fire({
            title: 'Added to Wishlist!',
            text: 'Product has been added to your wishlist successfully',
            icon: 'success',
            showCancelButton: true,
            confirmButtonText: 'View Wishlist',
            cancelButtonText: 'Continue Shopping'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/user/wishlist';
            }
        });

    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: error.message || 'Failed to add to wishlist',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}

</script>






