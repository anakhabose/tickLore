<body class="bg-gray-50"></body>

     {{>header}}
<div class="container mx-auto px-4 py-8 min-h-[calc(100vh-32rem)]">
    {{#if wishlistItems.length}}
    <h1 class="text-2xl font-bold mb-6 max-w-7xl mx-auto">My Wishlist</h1>
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-12 max-w-7xl mx-auto">
        {{#each wishlistItems}}
        {{#if this.product}}
        <div class="bg-white shadow-lg rounded-xl p-6 flex flex-col items-center hover:shadow-2xl transition-all duration-300 relative opacity-0 translate-y-10 cursor-pointer transform hover:scale-105 active:scale-95 scroll-card mx-auto w-full max-w-sm">
            <!-- Wishlist Button -->
            <button onclick="removeFromWishlist(event, '{{this.product._id}}')"
                class="absolute top-4 right-4 text-red-500 hover:text-red-600 transition-colors duration-300 text-xl hover:scale-110">
                <i class="fas fa-heart"></i>
            </button>
            
            <!-- Product Image -->
            <a href="/user/viewProducts/{{this.product._id}}" class="no-underline">
                <div class="flex items-center justify-center mb-5 bg-gray-100 rounded-lg p-4 overflow-hidden">
                    <img src="{{this.product.images.[0]}}" 
                         alt="{{this.product.productName}}" 
                         class="h-52 object-cover rounded-md shadow-sm transition-transform duration-300 hover:scale-110">
                </div>
            </a>
            
            <!-- Product Details -->
            <h2 class="text-xl font-semibold text-center text-gray-800 mb-2">{{this.product.productName}}</h2>
            <p class="text-lg font-bold text-center text-gray-700 mb-4">Rs.{{this.product.price}}</p>
            
            <!-- Add to Cart Button -->
            <button onclick="addToCart('{{this.product._id}}')"
                class="mt-auto w-full bg-gradient-to-r from-gray-900 to-gray-800 text-white py-3 px-5 rounded-lg hover:from-gray-700 hover:to-gray-600 transition-all duration-300 transform hover:scale-105 active:scale-95">
                Add to Cart
            </button>
        </div>
        {{/if}}
        {{/each}}
    </div>
    <div class="mt-8 flex justify-center items-center space-x-4"></div>
        {{#if pagination.hasPrevPage}}
            <a href="?page={{subtract pagination.currentPage 1}}" 
               class="px-4 py-2 bg-black text-white rounded hover:bg-gray-800 transition-colors">
                Previous
            </a>
        {{/if}}
        
        <span class="text-gray-600">
            Page {{pagination.currentPage}} of {{pagination.totalPages}}
        </span>
        
        {{#if pagination.hasNextPage}}
            <a href="?page={{add pagination.currentPage 1}}" 
               class="px-4 py-2 bg-black text-white rounded hover:bg-gray-800 transition-colors">
                Next
            </a>
        {{/if}}
    </div>
    {{else}}
    <div class="text-center py-32">
        <div class="mb-6">
            <i class="fas fa-heart text-gray-300 text-8xl"></i>
        </div>
        <h2 class="text-2xl font-semibold text-gray-700 mb-3">Your Wishlist is Empty</h2>
        <p class="text-gray-500 text-lg mb-6">Looks like you haven't added any items to your wishlist yet.</p>
        <a href="/user/shop" class="bg-yellow-500 text-white px-8 py-3 rounded-lg hover:bg-yellow-600 transition-colors text-lg inline-flex items-center">
            <i class="fas fa-shopping-bag mr-2"></i>
            Start Shopping
        </a>
    </div>
    {{/if}}
</div>


<footer class="bg-black text-white py-10">
    <div class="container mx-auto grid md:grid-cols-4 gap-8">
        <div>
            <h3 class="font-bold text-lg mb-4">Exclusive</h3>
            <p>Get 10% off your first order</p>
            <input type="email" placeholder="Enter your email" class="mt-2 p-2 rounded-lg w-full">
        </div>
        <div>
            <h3 class="font-bold text-lg mb-4">Support</h3>
            <p>111 Kochi,Kerala</p>
            <p>ticklore@gmail.com</p>
            <p>+88015-88888-9999</p>
        </div>
        <div>
            <h3 class="font-bold text-lg mb-4">Account</h3>
            <ul>
                <li><a href="#" class="hover:text-yellow-500">My Account</a></li>
                <li><a href="/user/login" class="hover:text-yellow-500">Login </a></li>
                <li><a href="/user/signup" class="hover:text-yellow-500">Signup</a></li>
                <li><a href="#" class="hover:text-yellow-500">Cart</a></li>
                <li><a href="#" class="hover:text-yellow-500">Wishlist</a></li>
                <li><a href="#" class="hover:text-yellow-500">Shop</a></li>
            </ul>
        </div>
        <div>
            <h3 class="font-bold text-lg mb-4">Quick Link</h3>
            <ul>
                <li><a href="#" class="hover:text-yellow-500">Privacy Policy</a></li>
                <li><a href="#" class="hover:text-yellow-500">Terms Of Use</a></li>
                <li><a href="#" class="hover:text-yellow-500">FAQ</a></li>
                <li><a href="#" class="hover:text-yellow-500">Contact</a></li>
            </ul>
        </div>
    </div>
    <div class="mt-8 text-center">
        <img src="/images/logo.png" alt="Footer Logo" class="mx-auto h-12">
        <p class="text-gray-600 mt-4">&copy; Copyright tickLore 2024. All rights reserved</p>
    </div>
</footer>
</body>
<script>
    // Get the search input element
    const searchInput = document.getElementById('searchInput');

    // Add event listener for input changes
    searchInput.addEventListener('input', function (e) {
        console.log('Input value:', e.target.value); // Add this to debug
    });

    // Add event listener for form submission
    document.querySelector('form').addEventListener('submit', function (e) {
        const query = searchInput.value.trim();

        // Optional: Prevent empty searches
        if (!query) {
            e.preventDefault();
            return;
        }

        console.log('Submitting search:', query); // Add this to debug
    });

    async function removeFromWishlist(event, productId) {
        try {
            const response = await fetch(`/user/removeFromWishlist/${productId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (response.ok) {
                // Show success toast
                Toastify({
                    text: "Product removed from wishlist",
                    duration: 3000,
                    gravity: "bottom",
                    position: "center",
                    style: {
                        background: "#10B981",
                        borderRadius: "8px",
                        padding: "12px 24px"
                    }
                }).showToast();

                // Find and remove the product card with animation
                const productCard = event.target.closest('.bg-white');
                productCard.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
                productCard.style.opacity = '0';
                productCard.style.transform = 'scale(0.9)';

                // Remove the card after animation instead of reloading
                setTimeout(() => {
                    productCard.remove();
                    // Check if there are any items left
                    const remainingItems = document.querySelectorAll('.bg-white').length;
                    if (remainingItems === 0) {
                        // If no items left, show empty state
                        const container = document.querySelector('.container');
                        container.innerHTML = `
                            <div class="text-center py-32">
                                <div class="mb-6">
                                    <i class="fas fa-heart text-gray-300 text-8xl"></i>
                                </div>
                                <h2 class="text-2xl font-semibold text-gray-700 mb-3">Your Wishlist is Empty</h2>
                                <p class="text-gray-500 text-lg mb-6">Looks like you haven't added any items to your wishlist yet.</p>
                                <a href="/user/shop" class="bg-yellow-500 text-white px-8 py-3 rounded-lg hover:bg-yellow-600 transition-colors text-lg inline-flex items-center">
                                    <i class="fas fa-shopping-bag mr-2"></i>
                                    Start Shopping
                                </a>
                            </div>
                        `;
                    }
                }, 300);

            } else {
                throw new Error(data.error || 'Failed to remove item');
            }
        } catch (error) {
            console.error('Error:', error);
            Toastify({
                text: "Failed to remove from wishlist",
                duration: 3000,
                gravity: "bottom",
                position: "center",
                style: {
                    background: "#991B1B",
                    borderRadius: "8px",
                    padding: "12px 24px"
                }
            }).showToast();
        }
    }

    async function addToCart(productId) {
        try {
            const response = await fetch('/user/addToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId: productId,
                    quantity: 1
                })
            });

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Session expired. Please login again.');
            }

            const data = await response.json();
            console.log('Response data:', data);

            if (response.ok) {
                // First remove from wishlist
                await fetch(`/user/removeFromWishlist/${productId}`, {
                    method: 'DELETE'
                });

                // Find and remove the product card with animation
                const productCard = document.querySelector(`button[onclick="addToCart('${productId}')"]`).closest('.bg-white');
                productCard.style.transition = 'opacity 0.3s ease-out';
                productCard.style.opacity = '0';

                const result = await Swal.fire({
                    icon: 'success',
                    title: 'Added to Cart!',
                    text: 'Item has been added to your cart successfully',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Go to Cart',
                    cancelButtonText: 'Continue Shopping'
                });

                if (result.isConfirmed) {
                    window.location.href = '/user/cart';
                } else {
                    // Remove the card from DOM after animation
                    setTimeout(() => {
                        productCard.remove();
                        // Check if there are any items left
                        const remainingItems = document.querySelectorAll('.bg-white').length;
                        if (remainingItems === 0) {
                            window.location.reload(); // Reload to show empty state
                        }
                    }, 300);
                }
            } else {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Cannot Add Item',
                    text: data.message || 'Failed to add item to cart'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'An unexpected error occurred'
            });

            if (error.message.includes('session expired')) {
                window.location.href = '/user/login';
            }
        }
    }

    // Add the animation observer code from shop.hbs
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.transition = 'none';
                entry.target.style.opacity = '0';
                entry.target.style.transform = 'translateY(-60px)';
                
                entry.target.offsetHeight;
                
                entry.target.style.transition = 'opacity 0.4s ease-out, transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1)';
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            } else {
                entry.target.style.opacity = '0';
                entry.target.style.transform = 'translateY(-60px)';
            }
        });
    }, observerOptions);

    // Initialize animation on all cards
    document.querySelectorAll('.scroll-card').forEach((card) => {
        observer.observe(card);
    });
</script>