{{>header}}
  <div class="flex flex-col md:flex-row min-h-screen bg-gray-50">
    <!-- Sidebar Navigation -->
 {{> userSidebar}}

    <!-- Main Content -->
    <main class="flex-1 p-6">
      <div class="max-w-2xl mx-auto">
       

        <!-- Address Management -->
       <div class="bg-gray-100 p-8 rounded-lg shadow-md w-full max-w-4xl mx-auto">
  <h1 class="text-3xl font-bold mb-6 text-center text-gray-800">Address Book</h1>
  <button
    id="addAddressBtn"
    class="bg-yellow-500 text-white px-6 py-2 rounded-lg shadow hover:bg-yellow-600 transition-all ease-in-out"
  >
    + Add Address
  </button>
  <div id="addressList" class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
    {{#each addresses}}
    <div class="p-6 bg-white rounded-lg shadow-md border border-gray-200">
      <h2 class="text-xl font-semibold text-gray-800 mb-2">{{name}}</h2>
      <p class="text-gray-600">{{addressLine1}}</p>
      {{#if addressLine2}}<p class="text-gray-600">{{addressLine2}}</p>{{/if}}
      <p class="text-gray-600">{{city}}, {{state}}, {{pincode}}</p>
      <p class="text-gray-600">{{country}}</p>
      <p class="text-gray-600"><strong>Phone:</strong> {{phoneNumber}}</p>
       {{#if isDefault}}
                    <span class="inline-block mt-2 bg-green-500 text-white px-2 py-1 rounded text-sm">Default</span>
       {{/if}}
      <div class="mt-4 flex justify-end space-x-4">
        <button
          class="px-4 py-2 text-sm bg-blue-500 text-white rounded-lg shadow hover:bg-blue-600 transition-all ease-in-out"
          data-modal-toggle="editAddressModal" 
          onclick="openEditModal({{json this}})"
        >
          Edit
        </button>
       
        <button
          class="px-4 py-2 text-sm bg-red-500 text-white rounded-lg shadow hover:bg-red-600 transition-all ease-in-out"
          onclick="deleteAddress('{{_id}}')"
        >
          Delete
        </button>
      </div>
    </div>
    {{/each}}
  </div>
</div>



        
       <!-- Modal for Adding/Editing Address -->
<div id="addressModal" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden">
  <div class="bg-white p-6 rounded w-full max-w-4xl mx-4 sm:mx-0">
    <h2 id="modalTitle" class="text-xl font-semibold mb-4">Add Address</h2>
    <form id="addressForm" novalidate onsubmit="return false;" class="space-y-6">
      <input type="hidden" id="addressId" />
      
      <!-- Name Field -->
      <div>
        <label class="block font-medium">Name</label>
        <input type="text" id="name" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="2" maxlength="50" />
      </div>

      <!-- Address Fields in Same Row -->
      <div class="flex space-x-4">
        <div class="flex-1">
          <label class="block font-medium">Address Line 1</label>
          <input type="text" id="addressLine1" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="5" maxlength="100" />
        </div>
        <div class="flex-1">
          <label class="block font-medium">Address Line 2 (Optional)</label>
          <input type="text" id="addressLine2" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" maxlength="100" />
        </div>
      </div>

      <!-- City and State Fields in Same Row -->
      <div class="flex space-x-4">
        <div class="flex-1">
          <label class="block font-medium">City</label>
          <input type="text" id="city" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="2" maxlength="50" />
        </div>
        <div class="flex-1">
          <label class="block font-medium">State</label>
          <input type="text" id="state" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="2" maxlength="50" />
        </div>
      </div>

      <!-- Country and Pincode Fields in Same Row -->
      <div class="flex space-x-4">
        <div class="flex-1">
          <label class="block font-medium">Country</label>
          <input type="text" id="country" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="2" maxlength="50" />
        </div>
        <div class="flex-1">
          <label class="block font-medium">Pincode</label>
          <input type="text" id="pincode" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required pattern="^[1-9][0-9]{5}$" />
        </div>
      </div>

      <!-- Phone Number Field -->
      <div>
        <label class="block font-medium">Phone Number</label>
        <input type="text" id="phoneNumber" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required pattern="^[1-9][0-9]{9}$" />
      </div>

      <!-- Action Buttons -->
      <div class="flex justify-end space-x-2">
        <button type="button" id="cancelBtn" class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400">Cancel</button>
        <button type="submit" class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600">Save</button>
      </div>
    </form>
  </div>
</div>


       
       <!-- Modal for Editing Address -->
<div id="editAddressModal" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden">
  <div class="bg-white p-6 rounded w-full max-w-4xl mx-4 sm:mx-0">
    <h2 id="modalTitle" class="text-xl font-semibold mb-4">Edit Address</h2>
    <form id="editAddressForm" novalidate onsubmit="return false;" class="space-y-6">
      <input type="hidden" id="addressId" name="id" />
      
      <!-- Name Field -->
      <div>
        <label class="block font-medium">Name</label>
        <input type="text" id="name" name="name" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="2" maxlength="50" />
      </div>

      <!-- Address Fields in Same Row -->
      <div class="flex space-x-4">
        <div class="flex-1">
          <label class="block font-medium">Address Line 1</label>
          <input type="text" id="addressLine1" name="addressLine1" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="5" maxlength="100" />
        </div>
        <div class="flex-1">
          <label class="block font-medium">Address Line 2 (Optional)</label>
          <input type="text" id="addressLine2" name="addressLine2" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" maxlength="100" />
        </div>
      </div>

      <!-- City and State Fields in Same Row -->
      <div class="flex space-x-4">
        <div class="flex-1">
          <label class="block font-medium">City</label>
          <input type="text" id="city" name="city" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="2" maxlength="50" />
        </div>
        <div class="flex-1">
          <label class="block font-medium">State</label>
          <input type="text" id="state" name="state" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="2" maxlength="50" />
        </div>
      </div>

      <!-- Country and Pincode Fields in Same Row -->
      <div class="flex space-x-4">
        <div class="flex-1">
          <label class="block font-medium">Country</label>
          <input type="text" id="country" name="country" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required minlength="2" maxlength="50" />
        </div>
        <div class="flex-1">
          <label class="block font-medium">Pincode</label>
          <input type="text" id="pincode" name="pincode" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required pattern="^[1-9][0-9]{5}$" />
        </div>
      </div>

      <!-- Phone Number Field -->
      <div>
        <label class="block font-medium">Phone Number</label>
        <input type="text" id="phoneNumber" name="phoneNumber" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-yellow-500" required pattern="^[1-9][0-9]{9}$" />
      </div>

      <!-- Action Buttons -->
      <div class="flex justify-end space-x-2">
        <button type="button" id="editCancelBtn" class="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400">Cancel</button>
        <button type="submit" class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600">Save</button>
      </div>
    </form>
  </div>
</div>
      </div>
    </main>
   </div>
  
    {{>userFooter}}
 

<script>
  document.addEventListener('DOMContentLoaded', () => {
  const form = document.querySelector('form');
  const imageInputs = ['image1', 'image2', 'image3', 'image4'].map(id => document.getElementById(id));
  const previewContainers = ['preview1', 'preview2', 'preview3', 'preview4'].map(id => document.getElementById(id));
  const cropModal = document.getElementById('cropModal');
  const cropImage = document.getElementById('cropImage');
  const cancelCropBtn = document.getElementById('cancelCrop');
  const saveCropBtn = document.getElementById('saveCrop');
  
  let currentCropper = null;
  let currentPreviewIndex = -1;

  // Validation function
  function validateForm() {
    // Get form values
    const productName = document.getElementById('productName').value.trim();
    const price = parseFloat(document.getElementById('price').value);
    const description = document.getElementById('description').value.trim();
    const category = document.getElementById('category').value;
    const stock = parseInt(document.getElementById('stock').value);

    // Product Name validation
    if (productName.length < 3 || productName.length > 50) {
      showError('Product name must be between 3 and 50 characters');
      return false;
    }

    // Price validation
    if (isNaN(price) || price < 1 || price > 1000000) {
      showError('Price must be between 1 and 1,000,000');
      return false;
    }

    // Check if price has more than 2 decimal places
    if (price.toString().includes('.') && 
        price.toString().split('.')[1].length > 2) {
      showError('Price cannot have more than 2 decimal places');
      return false;
    }

    // Description validation
    if (description.length < 10 || description.length > 300) {
      showError('Description must be between 10 and 300 characters');
      return false;
    }

    // Category validation
    if (!category || category === 'Select category') {
      showError('Please select a category');
      return false;
    }

    // Stock validation
    if (isNaN(stock) || stock < 0 || stock > 10000) {
      showError('Stock must be between 0 and 10,000');
      return false;
    }

    // Image validation
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    const maxSize = 5 * 1024 * 1024; // 5MB
    let imageCount = 0;

    for (const input of imageInputs) {
      if (input.files && input.files[0]) {
        // Check file type
        if (!allowedTypes.includes(input.files[0].type)) {
          showError('Please upload images in JPG, JPEG, PNG, or WEBP format only');
          return false;
        }

        // Check file size
        if (input.files[0].size > maxSize) {
          showError('Image size should not exceed 5MB');
          return false;
        }

        imageCount++;
      }
    }

    // Ensure exactly 4 images are uploaded
    if (imageCount !== 4) {
      showError('Please upload exactly 4 images');
      return false;
    }

    return true;
  }

  // Error display function
  function showError(message) {
    Swal.fire({
      icon: 'error',
      title: 'Validation Error',
      text: message,
      confirmButtonColor: '#EF4444'
    });
  }

  // Image preview and crop setup
  imageInputs.forEach((input, index) => {
    input.addEventListener('change', function() {
      const file = this.files[0];
      if (file) {
        // Add format validation
        const allowedFormats = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        if (!allowedFormats.includes(file.type)) {
          showError('Please upload images in JPG, JPEG, PNG, or WEBP format only');
          this.value = '';
          previewContainers[index].style.display = 'none';
          return;
        }

        // Check file size
        const maxSize = 5 * 1024 * 1024; // 5MB
        if (file.size > maxSize) {
          showError('Image size should not exceed 5MB');
          this.value = '';
          previewContainers[index].style.display = 'none';
          return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
          previewContainers[index].src = e.target.result;
          previewContainers[index].style.display = 'block';
        };
        reader.readAsDataURL(file);
      }
    });

    // Add click event to preview images for cropping
    previewContainers[index].addEventListener('click', function() {
      const file = imageInputs[index].files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          cropImage.src = e.target.result;
          cropModal.classList.remove('hidden');
          
          if (currentCropper) {
            currentCropper.destroy();
          }

          currentCropper = new Cropper(cropImage, {
            aspectRatio: 1,
            viewMode: 1,
            minCropBoxWidth: 100,
            minCropBoxHeight: 100
          });

          currentPreviewIndex = index;
        };
        reader.readAsDataURL(file);
      }
    });
  });

  // Cancel crop
  cancelCropBtn.addEventListener('click', () => {
    cropModal.classList.add('hidden');
    if (currentCropper) {
      currentCropper.destroy();
      currentCropper = null;
    }
  });

  // Save cropped image
  saveCropBtn.addEventListener('click', () => {
    if (currentCropper && currentPreviewIndex !== -1) {
      const croppedCanvas = currentCropper.getCroppedCanvas({
        width: 300,
        height: 300
      });

      croppedCanvas.toBlob((blob) => {
        const croppedFile = new File([blob], 'cropped-image.jpg', {
          type: 'image/jpeg'
        });

        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(croppedFile);
        imageInputs[currentPreviewIndex].files = dataTransfer.files;

        previewContainers[currentPreviewIndex].src = croppedCanvas.toDataURL('image/jpeg');

        cropModal.classList.add('hidden');
        currentCropper.destroy();
        currentCropper = null;
      }, 'image/jpeg');
    }
  });

  // Form submission
  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    const formData = new FormData(form);
    
    // Clear any existing 'images' fields
    for (const pair of formData.entries()) {
      if (pair[0] === 'images') {
        formData.delete(pair[0]);
      }
    }

    // Add images with correct field name
    imageInputs.forEach((input) => {
      if (input.files[0]) {
        formData.append('images', input.files[0]);
      }
    });

    try {
      const response = await fetch('/admin/products-add', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.status) {
        Swal.fire({
          icon: 'success',
          title: 'Success',
          text: data.message || 'Product added successfully!',
          confirmButtonText: 'OK',
          confirmButtonColor: '#EF4444'
        }).then(() => {
          window.location.href = '/admin/products';
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'Something went wrong!',
          confirmButtonColor: '#EF4444'
        });
      }
    } catch (error) {
      console.error('Form submission error:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Network error or server not responding. Please try again.',
        confirmButtonColor: '#EF4444'
      });
    }
  });
});
</script>