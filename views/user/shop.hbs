<style>
  .sticky-sidebar {
    position: sticky;
    top: 0;
    height: 100vh;
    overflow-y: auto; /* Makes the sidebar scrollable if content overflows */
  }
</style>
 <body class="bg-gray-50">

 <header class="bg-black text-white p-4">
    <div class="container mx-auto flex justify-between items-center">
      <div class="flex items-center space-x-4">
        <img src="/images/logo.png" alt="Logo" class="h-8">
        <nav class="space-x-6 hidden md:flex">
          <a href="/user/home" class="hover:text-yellow-500">Home</a>
         <a href="/user/shop" class="hover:text-yellow-500">Shop</a>
          <a href="#" class="hover:text-yellow-500">About</a>
          <a href="#" class="hover:text-yellow-500">Contact</a>
        </nav>
      </div>
      <div class="flex space-x-4 items-center">
  <form action="/user/shop/search" method="GET" class="flex items-center">
  <input 
    type="text" 
    name="query" 
    id="searchInput"
    placeholder="What are you looking for?" 
    class="p-2 rounded-lg text-black bg-white"
    value="{{searchQuery}}"
  >
  {{#if selectedCategory}}
  <input type="hidden" name="category" value="{{selectedCategory}}">
  {{/if}}
  <button type="submit" class="ml-2 p-2 hover:text-yellow-500">
    <i class="fas fa-search"></i>
  </button>
</form>

  {{#if user}}
      <a href="/user/profile" class="hover:text-yellow-500">
        <i class="fas fa-user mr-2"></i> 
      </a>
       <a href="/user/wishlist" class="hover:text-yellow-500"><i class="fas fa-heart"></i></a>
       <a href="/user/cart" class="hover:text-yellow-500"><i class="fas fa-shopping-cart"></i></a>

      <a href="/user/logout" class="hover:text-yellow-500">
        <i class="fas fa-sign-out-alt"></i>
      </a>

  {{else}}
    <a href="/user/login" class="hover:text-yellow-500">LOGIN</a>
    <a href="/user/signup" class="hover:text-yellow-500">SIGNUP</a>
  {{/if}}
</div>
    </div>
  </header>
<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col md:flex-row gap-8 relative">
        <!-- Category Sidebar -->
       <div class="w-full md:w-64 bg-white rounded-lg shadow-sm border border-gray-100 sticky top-0 h-screen overflow-y-auto">
            <div class="p-5 border-b border-gray-100">
                <h2 class="text-lg font-semibold text-gray-800">Categories</h2>
            </div>
            
            <div class="p-4">
                <!-- All Categories Option -->
                <a href="/user/shop" 
                   class="block px-4 py-3 mb-2 rounded-lg transition-all duration-200 {{#unless selectedCategory}}bg-gray-50 text-yellow-500{{else}}hover:bg-gray-50{{/unless}}">
                    <div class="flex items-center">
                        <span class="w-2 h-2 rounded-full {{#unless selectedCategory}}bg-yellow-500{{else}}bg-gray-300{{/unless}} mr-3"></span>
                        <span class="text-sm font-medium">All Categories</span>
                    </div>
                </a>

        <!-- Individual Categories -->
        {{#each categories}}
        <a href="/user/shop?category={{this}}" 
           class="block px-4 py-3 mb-2 rounded-lg transition-all duration-200 {{#if (eq ../selectedCategory this)}}bg-gray-50 text-yellow-500{{else}}hover:bg-gray-50{{/if}}">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <span class="w-2 h-2 rounded-full {{#if (eq ../selectedCategory this)}}bg-yellow-500{{else}}bg-gray-300{{/if}} mr-3"></span>
                    <span class="text-sm font-medium">{{this}}</span>
                </div>
                <i class="fas fa-chevron-right text-xs text-gray-400"></i>
            </div>
        </a>
        {{/each}}
    </div>
</div>

        <!-- Main Content -->
        <div class="flex-1 main-content">
            <div class="flex justify-between items-center mb-8">
                <h1 class="text-2xl font-bold">Our Collection</h1>
                <div class="flex items-center space-x-4">
                    <select class="border rounded-lg px-4 py-2" onchange="window.location.href = '/user/shop?sort=' + this.value + '{{#if selectedCategory}}&category={{selectedCategory}}{{/if}}'">
                        <option value="default" {{#if (eq sortOption "default")}}selected{{/if}}>Sort by</option>
                        <option value="priceAsc" {{#if (eq sortOption "priceAsc")}}selected{{/if}}>Price: Low to High</option>
                        <option value="priceDesc" {{#if (eq sortOption "priceDesc")}}selected{{/if}}>Price: High to Low</option>
                        <option value="newArrivals" {{#if (eq sortOption "newArrivals")}}selected{{/if}}>Newest First</option>
                        <option value="aToZ" {{#if (eq sortOption "aToZ")}}selected{{/if}}>A to Z</option>
                        <option value="zToA" {{#if (eq sortOption "zToA")}}selected{{/if}}>Z to A</option>
                    </select>
                </div>
            </div>
          
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 px-4">
    {{#if data.length}}
        {{#each data}}
            <div class="bg-white shadow-lg rounded-xl p-6 flex flex-col items-center hover:shadow-2xl transition-all duration-300 relative opacity-0 translate-y-10 cursor-pointer transform hover:scale-105 active:scale-95 scroll-card"
                 onclick="handleCardClick(this)">
   <button 
    class="absolute top-4 right-4 text-gray-400 hover:text-red-500 transition-colors duration-300 text-xl hover:scale-110 wishlist-btn"
    onclick="toggleWishlist('{{this._id}}', this)"
>
    <i class="fas fa-heart {{#if this.isInWishlist}}text-red-500{{/if}}"></i>
</button>

            
            <!-- Product Image -->
            <a href="/user/viewProducts/{{this._id}}" class="no-underline">
                <div class="flex items-center justify-center mb-5 bg-gray-100 rounded-lg p-4 overflow-hidden">
                    <img 
                        src="{{this.images.[0]}}" 
                        alt="{{this.name}}" 
                        class="h-52 object-cover rounded-md shadow-sm transition-transform duration-300 hover:scale-110"
                    >
                </div>
            </a>
            
            <!-- Product Details -->
            <h2 class="text-xl font-semibold text-center text-gray-800 mb-2">{{this.name}}</h2>
            <div class="text-center mb-4">
                {{#if this.discountedPrice}}
                    <div class="flex flex-col items-center">
                        <div class="flex items-center gap-2">
                            <span class="text-xl font-semibold text-green-600">₹{{this.discountedPrice}}</span>
                            <span class="text-black font-semibold line-through">₹{{this.price}}</span>
                        </div>
        
                    </div>
                {{else}}
                    <span class="text-xl font-semibold text-black">₹{{this.price}}</span>
                {{/if}}
            </div>
            
            <!-- Add to Cart Button -->
            <button 
    class="mt-auto w-full {{#if this.isInCart}}
        bg-gradient-to-r from-green-600 to-green-500
    {{else}}
        bg-gradient-to-r from-gray-900 to-gray-800
    {{/if}} 
    text-white py-3 px-5 rounded-lg hover:from-gray-700 hover:to-gray-600 transition-all duration-300 transform hover:scale-105 active:scale-95"
    onclick="handleCartAction('{{this._id}}', this)"
    data-in-cart="{{this.isInCart}}"
>
    {{#if this.isInCart}}
        Go to Cart
    {{else}}
        Add to Cart
    {{/if}}
</button>
        </div>
        {{/each}}
    {{else}}
        <div class="col-span-3 text-center py-8">
            <p class="text-gray-500">No products found</p>
        </div>
    {{/if}}
</div>

        </div>
    </div>
</div>

    <footer class="bg-black text-white py-10">
    <div class="container mx-auto grid md:grid-cols-4 gap-8">
      <div>
        <h3 class="font-bold text-lg mb-4">Exclusive</h3>
        <p>Get 10% off your first order</p>
        <input type="email" placeholder="Enter your email" class="mt-2 p-2 rounded-lg w-full">
      </div>
      <div>
        <h3 class="font-bold text-lg mb-4">Support</h3>
        <p>111 Kochi,Kerala</p>
        <p>ticklore@gmail.com</p>
        <p>+88015-88888-9999</p>
      </div>
      <div>
        <h3 class="font-bold text-lg mb-4">Account</h3>
        <ul>
          <li><a href="#" class="hover:text-yellow-500">My Account</a></li>
          <li><a href="/user/login" class="hover:text-yellow-500">Login </a></li>
            <li><a href="/user/signup" class="hover:text-yellow-500">Signup</a></li>
          <li><a href="#" class="hover:text-yellow-500">Cart</a></li>
          <li><a href="#" class="hover:text-yellow-500">Wishlist</a></li>
          <li><a href="#" class="hover:text-yellow-500">Shop</a></li>
        </ul>
      </div>
      <div>
        <h3 class="font-bold text-lg mb-4">Quick Link</h3>
        <ul>
          <li><a href="#" class="hover:text-yellow-500">Privacy Policy</a></li>
          <li><a href="#" class="hover:text-yellow-500">Terms Of Use</a></li>
          <li><a href="#" class="hover:text-yellow-500">FAQ</a></li>
          <li><a href="#" class="hover:text-yellow-500">Contact</a></li>
        </ul>
      </div>
    </div>
    <div class="mt-8 text-center">
      <img src="/images/logo.png" alt="Footer Logo" class="mx-auto h-12">
      <p class="text-gray-600 mt-4">&copy; Copyright tickLore 2024. All rights reserved</p>
    </div>
  </footer>
  </body>
  <script>
const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
};
const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            // Reset the animation
            entry.target.style.transition = 'none';
            entry.target.style.opacity = '0';
            entry.target.style.transform = 'translateY(-60px)'; // Start from higher up
            
            // Force a reflow
            entry.target.offsetHeight;
            
            // Add bounce effect with cubic-bezier
            entry.target.style.transition = 'opacity 0.4s ease-out, transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1)';
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
        } else {
            // Reset when out of view
            entry.target.style.opacity = '0';
            entry.target.style.transform = 'translateY(-60px)';
        }
    });
}, observerOptions);

// Add smooth transition to all cards
document.querySelectorAll('.scroll-card').forEach((card, index) => {
    observer.observe(card);
});
  // Get the search input element
  const searchInput = document.getElementById('searchInput');

  // Add event listener for input changes
  searchInput.addEventListener('input', function(e) {
    console.log('Input value:', e.target.value); // Add this to debug
  });

  // Add event listener for form submission
  document.querySelector('form').addEventListener('submit', function(e) {
    const query = searchInput.value.trim();
    
    // Optional: Prevent empty searches
    if (!query) {
      e.preventDefault();
      return;
    }
    
    console.log('Submitting search:', query); // Add this to debug
  });
  
// Add this to your existing JavaScript
async function handleCartAction(productId, button) {
    const isInCart = button.getAttribute('data-in-cart') === 'true';
    
    if (isInCart) {
        // Navigate to cart page
        window.location.href = '/user/cart';
        return;
    }

    try {
        const response = await fetch('/user/addToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId: productId, quantity: 1 })
        });

        const data = await response.json();

        if (response.status === 401) {
            window.location.href = data.redirect;
            return;
        }

        if (response.ok) {
            // Update button appearance and functionality
            button.classList.remove('from-gray-900', 'to-gray-800');
            button.classList.add('from-green-600', 'to-green-500');
            button.textContent = 'Go to Cart';
            button.setAttribute('data-in-cart', 'true');

            Toastify({
                text: "Product added to cart successfully!",
                duration: 3000,
                gravity: "bottom",
                position: "center",
                style: {
                    background: "#10B981",
                    borderRadius: "8px",
                    padding: "12px 24px"
                }
            }).showToast();
        } else {
            Toastify({
                text: data.message || "Failed to add product to cart",
                duration: 3000,
                gravity: "bottom",
                position: "center",
                style: {
                    background: "#EF4444",
                    borderRadius: "8px",
                    padding: "12px 24px"
                }
            }).showToast();
        }
    } catch (error) {
        console.error('Error:', error);
        Toastify({
            text: "An error occurred while adding to cart",
            duration: 3000,
            gravity: "bottom",
            position: "center",
            style: {
                background: "#991B1B",
                borderRadius: "8px",
                padding: "12px 24px"
            }
        }).showToast();
    }
}
async function toggleWishlist(productId, button) {
    try {
        const icon = button.querySelector('i');
        const isInWishlist = icon.classList.contains('text-red-500');
        
        if (isInWishlist) {
            const response = await fetch(`/user/removeFromWishlist/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const data = await response.json();
            if (data.success) {
                icon.classList.remove('text-red-500');
                Toastify({
                    text: "Product removed from wishlist",
                    duration: 3000,
                    gravity: "bottom",
                    position: "center",
                    style: {
                        background: "#EF4444",
                        borderRadius: "8px",
                        padding: "12px 24px"
                    }
                }).showToast();
            } else {
                console.error('Failed to remove from wishlist:', data.error);
                Toastify({
                    text: "Failed to remove from wishlist",
                    duration: 3000,
                    gravity: "bottom",
                    position: "center",
                    style: {
                        background: "#991B1B",
                        borderRadius: "8px",
                        padding: "12px 24px"
                    }
                }).showToast();
                return;
            }
        } else {
            const response = await fetch('/user/addToWishlist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })
            });
            
            const data = await response.json();
            if (data.success) {
                icon.classList.add('text-red-500');
                Toastify({
                    text: "Product added to wishlist",
                    duration: 3000,
                    gravity: "bottom",
                    position: "center",
                    style: {
                        background: "#10B981",
                        borderRadius: "8px",
                        padding: "12px 24px"
                    }
                }).showToast();
            } else {
                console.error('Failed to add to wishlist:', data.error);
                Toastify({
                    text: "Failed to add to wishlist",
                    duration: 3000,
                    gravity: "bottom",
                    position: "center",
                    style: {
                        background: "#991B1B",
                        borderRadius: "8px",
                        padding: "12px 24px"
                    }
                }).showToast();
                return;
            }
        }
    } catch (error) {
        console.error('Wishlist operation failed:', error);
        Toastify({
            text: "An error occurred. Please try again.",
            duration: 3000,
            gravity: "bottom",
            position: "center",
            style: {
                background: "#991B1B",
                borderRadius: "8px",
                padding: "12px 24px"
            }
        }).showToast();
    }
}
  </script>