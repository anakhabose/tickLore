  {{>header}}
<div class="flex flex-col md:flex-row min-h-screen bg-gray-50">
   

<div class="container mx-auto px-4 py-8">
        <!-- Breadcrumb -->
        <nav class="text-sm mb-8">
            <ol class="list-none p-0 inline-flex">
                <li class="flex items-center">
                    <a href="/user/home" class="text-gray-500 hover:text-gray-700">Home</a>
                    <span class="mx-2 text-gray-500">/</span>
                </li>
                <li class="text-gray-700">Cart</li>
            </ol>
        </nav>

        <!-- Main Cart Layout -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Cart Table Section -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-2xl shadow-md border border-gray-100 overflow-hidden hover:shadow-lg transition-shadow duration-300">
                    <!-- Table Header - More distinct and stylish -->
                    <div class="grid grid-cols-12 gap-4 p-6 bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
                        <div class="col-span-5 text-sm font-semibold text-gray-800 uppercase tracking-wider flex items-center">
                            <i class="fas fa-box-open mr-2 text-yellow-500"></i>Product
                        </div>
                        <div class="col-span-3 text-sm font-semibold text-gray-800 uppercase tracking-wider text-center flex items-center justify-center">
                            <i class="fas fa-calculator mr-2 text-yellow-500"></i>Quantity
                        </div>
                        <div class="col-span-2 text-sm font-semibold text-gray-800 uppercase tracking-wider text-right flex items-center justify-end">
                            <i class="fas fa-tag mr-2 text-yellow-500"></i>Price
                        </div>
                        <div class="col-span-2 text-sm font-semibold text-gray-800 uppercase tracking-wider text-right flex items-center justify-end">
                            <i class="fas fa-coins mr-2 text-yellow-500"></i>Total
                        </div>
                    </div>

                    <!-- Table Body - Enhanced styling -->
                    <div class="divide-y divide-gray-100">
                        {{#each cartItems}}
                        <div class="grid grid-cols-12 gap-4 p-6 items-center hover:bg-yellow-50/30 transition-all duration-300">
                            <!-- Product Info - Enhanced -->
                            <div class="col-span-5">
                                <div class="flex gap-4 items-center">
                                    <div class="relative group">
                                        <div class="w-24 h-24 rounded-xl overflow-hidden bg-gray-100 shadow-sm transform group-hover:scale-105 transition-all duration-300">
                                            <img src="{{this.productId.images.[0]}}" 
                                                 alt="{{this.productId.productName}}"
                                                 class="w-full h-full object-cover">
                                        </div>
                                    </div>
                                    <div class="flex-1">
                                        <h3 class="font-medium text-gray-900 mb-1 line-clamp-1 hover:text-yellow-600 transition-colors duration-200">{{this.productId.productName}}</h3>
                                        {{#if this.productId.offer}}
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 border border-yellow-200">
                                                <i class="fas fa-gift mr-1"></i>
                                                {{round (multiply (divide (subtract this.productId.price this.productId.discountedPrice) this.productId.price) 100)}}% OFF
                                            </span>
                                        {{/if}}
                                    </div>
                                </div>
                            </div>

                            <!-- Quantity Controls - Enhanced -->
                            <div class="col-span-3">
                                <div class="flex items-center justify-center">
                                    <div class="inline-flex items-center bg-gray-50 rounded-lg p-1 shadow-sm">
                                        <button type="button" onclick="decrementQuantity(this)"
                                                class="w-8 h-8 flex items-center justify-center rounded-md text-gray-600 hover:bg-yellow-100 hover:text-yellow-600 transition-all">
                                            <i class="fas fa-minus text-xs"></i>
                                        </button>
                                        <input type="number" 
                                               name="quantity" 
                                               value="{{this.quantity}}"
                                               min="1" 
                                               max="{{this.productId.quantity}}"
                                               data-product-id="{{this.productId._id}}"
                                               data-available-quantity="{{this.productId.quantity}}"
                                               data-original-quantity="{{this.quantity}}"
                                               class="w-12 text-center bg-transparent font-medium text-gray-900"
                                               oninput="handleQuantityInput(this)" 
                                               readonly>
                                        <button type="button" onclick="incrementQuantity(this)"
                                                class="w-8 h-8 flex items-center justify-center rounded-md text-gray-600 hover:bg-yellow-100 hover:text-yellow-600 transition-all"
                                                {{#if (lte this.productId.quantity this.quantity)}}disabled{{/if}}>
                                            <i class="fas fa-plus text-xs"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <!-- Price - Enhanced -->
                            <div class="col-span-2 text-right">
                                {{#if this.productId.discountedPrice}}
                                    <div class="text-green-600 font-medium">₹{{this.productId.discountedPrice}}</div>
                                    <div class="text-sm text-gray-400 line-through">₹{{this.productId.price}}</div>
                                {{else}}
                                    <div class="text-gray-900 font-medium">₹{{this.productId.price}}</div>
                                {{/if}}
                            </div>

                            <!-- Total & Remove - Enhanced -->
                            <div class="col-span-2 flex items-center justify-end gap-4">
                                <div class="text-gray-900 font-medium">₹{{multiply this.salePrice this.quantity}}</div>
                                <button onclick="removeFromCart('{{this.productId._id}}')"
                                        class="p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-full transition-all duration-200">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        {{else}}
                        <!-- Enhanced Empty State -->
                        <div class="p-12 text-center">
                            <div class="w-20 h-20 mx-auto mb-6 rounded-full bg-yellow-50 flex items-center justify-center">
                                <i class="fas fa-shopping-cart text-3xl text-yellow-500"></i>
                            </div>
                            <h3 class="text-xl font-medium text-gray-600 mb-2">Your cart is empty</h3>
                            <p class="text-gray-400 mb-6">Looks like you haven't added anything to your cart yet</p>
                            <a href="/user/shop" class="inline-flex items-center px-6 py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors duration-200">
                                <i class="fas fa-shopping-bag mr-2"></i>
                                Start Shopping
                            </a>
                        </div>
                        {{/each}}
                    </div>
                </div>
                
                <!-- Action Buttons -->
              
            </div>

            <!-- Cart Total Section -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 sticky top-8">
                    <h2 class="text-xl font-bold text-gray-900 mb-6">Order Summary</h2>
                    <div class="space-y-4">
                        <div class="flex justify-between py-3 border-b border-gray-100">
                            <span class="text-gray-600">Subtotal</span>
                            <span class="font-medium text-gray-900">₹{{subtotal}}</span>
                        </div>
                        <div class="flex justify-between py-3 border-b border-gray-100">
                            <span class="text-gray-600">Discount</span>
                            <span class="font-medium text-green-600">- ₹0</span>
                        </div>
                        <div class="flex justify-between py-3 border-b border-gray-100">
                            <span class="text-gray-600">GST (0%)</span>
                            <span class="font-medium text-gray-900">₹0</span>
                        </div>
                        <div class="flex justify-between py-3 border-b border-gray-100">
                            <span class="text-gray-600">Shipping</span>
                            <span class="font-medium text-gray-900">₹{{deliveryCharges}}</span>
                        </div>
                        <div class="flex justify-between py-4">
                            <span class="text-lg font-bold text-gray-900">Total</span>
                            <span class="text-lg font-bold text-gray-900">₹{{totalAmount}}</span>
                        </div>
                        
                        <button type="button" 
                                onclick="validateStockBeforeCheckout()"
                                class="w-full px-6 py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors duration-200 font-medium flex items-center justify-center gap-2">
                            <i class="fas fa-lock text-sm"></i>
                            Proceed to Checkout
                        </button>
                        
                        <div class="mt-4 flex items-center justify-center text-sm text-gray-500">
                            <i class="fas fa-shield-alt mr-2"></i>
                            Secure Checkout
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
    {{>userFooter}}
  <script>
  
     let updateTimeout;

function handleQuantityInput(inputElement) {
    clearTimeout(updateTimeout);
    
    let quantity = parseInt(inputElement.value);
    
    if (isNaN(quantity)) {
        quantity = 1;
        inputElement.value = quantity;
    }

    updateTimeout = setTimeout(() => {
        validateAndUpdateQuantity(inputElement);
    }, 500); 
}

function validateAndUpdateQuantity(inputElement) {
    const productId = inputElement.getAttribute('data-product-id');
    const availableQuantity = parseInt(inputElement.getAttribute('data-available-quantity'));
    let quantity = parseInt(inputElement.value);

    if (isNaN(quantity)) {
        quantity = 1;
    }

    // Check minimum quantity
    if (quantity < 1) {
        quantity = 1;
        inputElement.value = quantity;
        Swal.fire({
            icon: 'warning',
            title: 'Invalid Quantity',
            text: 'Quantity cannot be less than 1',
            showConfirmButton: true
        });
        return;
    }

    // Check stock availability
    if (quantity > availableQuantity) {
        quantity = availableQuantity;
        inputElement.value = quantity;
        Swal.fire({
            icon: 'warning',
            title: 'Stock Limit Reached',
            text: `Only ${availableQuantity} item${availableQuantity === 1 ? '' : 's'} available in stock.`,
            showConfirmButton: true
        });
        return;
    }

    const originalQuantity = parseInt(inputElement.getAttribute('data-original-quantity'));
    if (quantity !== originalQuantity) {
        updateQuantity(productId, quantity);
    }
}
        function updateQuantity(productId, quantity) {
            fetch('/user/updateCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'same-origin', 
                body: JSON.stringify({ productId, quantity }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.message === 'Cart updated successfully') {
                    
                    const quantityInput = document.querySelector(`input[data-product-id="${productId}"]`);
                    if (quantityInput) {
                        quantityInput.setAttribute('data-original-quantity', quantity.toString());
                    }
                    window.location.reload();
                } else if (data.redirect) {
                    handleAuthError(data);
                } 
                else {
                    throw new Error(data.message || 'Failed to update cart');
                }
            })
            .catch(error => {
                console.error(error);
            });
        }

       
function removeFromCart(productId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, remove it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/user/removeFromCart/${productId}`, {
                        method: 'DELETE',
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.message === 'Item removed from cart successfully') {
                            Swal.fire(
                                'Removed!',
                                'The item has been removed from your cart.',
                                'success'
                            ).then(() => {
                                window.location.reload();
                            });
                        } else if (data.redirect) {
                            handleAuthError(data);
                        } else {
                            throw new Error(data.message || 'Failed to remove item from cart');
                        }
                    })
                    .catch(error => {
                        handleAuthError(error);
                    });
                }
            });
}

function incrementQuantity(button) {
    const input = button.previousElementSibling;
    const currentValue = parseInt(input.value);
    const availableQuantity = parseInt(input.getAttribute('data-available-quantity'));
    
    
    if (currentValue >= availableQuantity) {
        Swal.fire({
            icon: 'warning',
            title: 'Stock Limit Reached',
            text: `Only ${availableQuantity} item${availableQuantity === 1 ? '' : 's'} available in stock.`,
            showConfirmButton: true
        });
        return;
    }
    
    
    if (currentValue >= 4) {
        Swal.fire({
            icon: 'warning',
            title: 'Quantity Limit Reached',
            text: 'Maximum quantity limit is 4 items',
            showConfirmButton: true
        });
        return;
    }
    
    input.value = currentValue + 1;
    handleQuantityInput(input);
    
    // Disable increment button if we've reached either limit
    if (currentValue + 1 >= availableQuantity || currentValue + 1 >= 4) {
        button.disabled = true;
        button.classList.add('opacity-50', 'cursor-not-allowed');
    }
}


function decrementQuantity(button) {
    const input = button.nextElementSibling;
    const currentValue = parseInt(input.value);
    
    if (currentValue <= 1) {
        Swal.fire({
            icon: 'warning',
            title: 'Invalid Quantity',
            text: 'Quantity cannot be less than 1',
            showConfirmButton: true
        });
        return;
    }
    
    input.value = currentValue - 1;
    handleQuantityInput(input);
}

function validateStockBeforeCheckout() {
    // Get all quantity inputs
    const quantityInputs = document.querySelectorAll('input[name="quantity"]');
    
    // If there are no items in cart, show error
    if (!quantityInputs || quantityInputs.length === 0) {
        Swal.fire({
            icon: 'error',
            title: 'Empty Cart',
            text: 'Your cart is empty. Please add items before checking out.',
            confirmButtonText: 'OK'
        });
        return;
    }

    let hasStockIssue = false;
    let stockMessage = '';

    quantityInputs.forEach(input => {
        try {
            const gridContainer = input.closest('.grid.grid-cols-12');
            if (!gridContainer) return;

            const productNameElement = gridContainer.querySelector('h3.font-medium.text-gray-900');
            if (!productNameElement) return;

            const productName = productNameElement.textContent.trim();
            const requestedQuantity = parseInt(input.value);
            const availableQuantity = parseInt(input.getAttribute('data-available-quantity'));

            if (availableQuantity === 0) {
                hasStockIssue = true;
                stockMessage += `${productName} is out of stock\n`;
            } else if (requestedQuantity > availableQuantity) {
                hasStockIssue = true;
                stockMessage += `Only ${availableQuantity} units available for ${productName}\n`;
            }
        } catch (error) {
            console.error('Error processing cart item:', error);
        }
    });

    if (hasStockIssue) {
        Swal.fire({
            icon: 'error',
            title: 'Stock Issue',
            text: stockMessage,
            confirmButtonText: 'OK'
        });
        return;
    }

    // First verify stock availability with the server
    fetch('/user/verify-stock', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            items: Array.from(quantityInputs).map(input => ({
                productId: input.getAttribute('data-product-id'),
                quantity: parseInt(input.value)
            }))
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // If stock verification is successful, redirect to checkout
            window.location.replace('/user/checkout');
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Stock Issue',
                text: data.message || 'Unable to proceed to checkout. Please try again.',
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Unable to proceed to checkout. Please try again.',
            confirmButtonText: 'OK'
        });
    });
}

</script>