<div class="flex min-h-screen flex-col">
 <header class="bg-black text-white p-4 flex justify-between items-center h-16 relative">
    <img src="/images/logo.png" alt="Logo" class="h-48 absolute top-1/2 transform -translate-y-1/2">
  </header>
  <div class="flex flex-1">
    {{>sidebar}}
    <main class="flex-1 p-6 bg-white">
      <div class="max-w-4xl mx-auto bg-grey-100 p-6 rounded-lg">
        <h2 class="text-2xl font-bold mb-6">Edit Offer</h2>
        
        <form id="editOfferForm" class="space-y-4" method="POST" action="/admin/editOffer/{{offer._id}}">
          <div>
            <label class="block text-sm font-medium">Offer Title</label>
            <input type="text" id="offerTitle" name="offerTitle" 
                value="{{offer.offerTitle}}" 
                placeholder="Offer Title..." 
                class="w-full border p-2 rounded">
          </div>

          <div>
            <label class="block text-sm font-medium">Apply Offer To</label>
            <select id="offerType" name="offerType" class="w-full border p-2 rounded" onchange="toggleOfferType()">
              <option value="">-- Select Offer Type --</option>
              <option value="product" {{#if (eq offer.offerType "product")}}selected{{/if}}>Product</option>
              <option value="category" {{#if (eq offer.offerType "category")}}selected{{/if}}>Category</option>
            </select>
          </div>

          <div id="productSelection" class="{{#unless (eq offer.offerType 'product')}}hidden{{/unless}}">
            <label class="block text-sm font-medium">Select Product</label>
            <select id="productId" name="productId" class="w-full border p-2 rounded">
    <option value="">-- Select Product --</option>
    {{#each products}}
        <option value="{{this._id}}" 
            {{#if (eq (toString this._id) (toString ../offer.productId))}}selected{{/if}}>
            {{this.productName}} - â‚¹{{this.price}}
        </option>
    {{/each}}
</select>
          </div>

          <div id="categorySelection" class="{{#unless (eq offer.offerType 'category')}}hidden{{/unless}}">
            <label class="block text-sm font-medium">Select Category</label>
            <select id="categoryId" name="categoryId" class="w-full border p-2 rounded">
              <option value="">-- Select Category --</option>
              {{#each categories}}
                <option value="{{this._id}}" {{#if (eq this._id ../offer.categoryId)}}selected{{/if}}>
                  {{this.categoryName}}
                </option>
              {{/each}}
            </select>
          </div>

          <div>
            <label class="block text-sm font-medium">Discount Value</label>
            <input type="number" id="discountValue" name="discountValue" 
                value="{{offer.discountValue}}" 
                class="w-full border p-2 rounded">
          </div>

          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium">Start Date</label>
              <input type="date" id="startDate" name="startDate" 
                  value="{{offer.startDate}}" 
                  class="w-full border p-2 rounded">
            </div>
            <div>
              <label class="block text-sm font-medium">End Date</label>
              <input type="date" id="endDate" name="endDate" 
                  value="{{offer.endDate}}" 
                  class="w-full border p-2 rounded">
            </div>
          </div>

          <button type="submit" class="w-full bg-red-500 hover:bg-red-600 text-white rounded-lg py-2">
            Update Offer
          </button>
        </form>
      </div>
    </main>
  </div>

  <footer class="bg-black text-white p-4 mt-6 text-center">
    <p>&copy; 2024 tickLore. All Rights Reserved.</p>
  </footer>
</div>

<script>
function toggleOfferType() {
    const offerType = document.getElementById('offerType').value;
    const productSelection = document.getElementById('productSelection');
    const categorySelection = document.getElementById('categorySelection');

    if (offerType === 'product') {
        productSelection.classList.remove('hidden');
        categorySelection.classList.add('hidden');
    } else if (offerType === 'category') {
        categorySelection.classList.remove('hidden');
        productSelection.classList.add('hidden');
    } else {
        productSelection.classList.add('hidden');
        categorySelection.classList.add('hidden');
    }
}

document.getElementById('editOfferForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Get the offerId from the form's action attribute
    const formAction = e.target.getAttribute('action');
    const offerId = formAction.split('/').pop();

    const formData = {
        offerTitle: document.getElementById('offerTitle').value.trim(),
        offerType: document.getElementById('offerType').value,
        discountValue: document.getElementById('discountValue').value,
        startDate: document.getElementById('startDate').value,
        endDate: document.getElementById('endDate').value,
    };

    // Add productId or categoryId based on offer type
    if (formData.offerType === 'product') {
        formData.productId = document.getElementById('productId').value;
    } else if (formData.offerType === 'category') {
        formData.categoryId = document.getElementById('categoryId').value;
    }

    // Enhanced validations
    if (!formData.offerTitle || formData.offerTitle.length < 3 || formData.offerTitle.length > 30) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Offer title must be between 3 and 30 characters'
        });
        return;
    }

    if (!formData.offerType) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please select an offer type'
        });
        return;
    }

    // Validate product/category selection based on offer type
    if (formData.offerType === 'product' && !formData.productId) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please select a product'
        });
        return;
    }

    if (formData.offerType === 'category' && !formData.categoryId) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please select a category'
        });
        return;
    }

    if (!formData.discountValue || isNaN(formData.discountValue) || 
        formData.discountValue < 1 || formData.discountValue > 90) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Discount value must be between 1 and 90'
        });
        return;
    }

    if (!formData.startDate || !formData.endDate) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please select both start and end dates'
        });
        return;
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const startDate = new Date(formData.startDate);
    const endDate = new Date(formData.endDate);

    if (startDate < today) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Start date cannot be in the past'
        });
        return;
    }

    if (endDate <= startDate) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'End date must be after start date'
        });
        return;
    }

    try {
        const response = await fetch(`/admin/editOffers/${offerId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (data.status) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Offer updated successfully!'
            }).then(() => {
                window.location.href = '/admin/offers';
            });
        } else {
            // Enhanced error handling
            const errorMessage = data.message === "An offer with this name already exists" 
                ? "This offer name already exists. Please choose a different name."
                : data.message || 'An error occurred while updating the offer';
                
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: errorMessage
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the offer'
        });
    }
});

// Add these event listeners at the end of the script
const offerTitleInput = document.getElementById('offerTitle');
const maxLength = 30;

offerTitleInput.addEventListener('input', function() {
    if (this.value.length > maxLength) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: `Offer title must not exceed ${maxLength} characters`
        });
        this.value = this.value.substring(0, maxLength);
    }
});

// Prevent spaces at the beginning
offerTitleInput.addEventListener('keypress', function(e) {
    if (this.value.length === 0 && e.key === ' ') {
        e.preventDefault();
    }
});

// Initialize the offer type selection on page load
document.addEventListener('DOMContentLoaded', () => {
    toggleOfferType();
});
</script>  