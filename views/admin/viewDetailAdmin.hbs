 <header class="bg-black text-white p-4 flex justify-between items-center h-16 relative"></header>
    <img src="/images/logo.png" alt="Logo" class="h-48 absolute top-1/2 transform -translate-y-1/2">
  </header>

{{log order}}
  <div class="w-full min-h-screen bg-gray-100 py-12">
    <div class="max-w-6xl mx-auto p-10 bg-white shadow rounded-lg">
      <!-- Order Summary Section -->
      
      <div class="mb-12">
        <h2 class="text-2xl font-semibold mb-8">Order Summary</h2>
        
        <div class="grid grid-cols-12 gap-8 items-start">
          {{#each order.items}}  
            <div class="col-span-2 flex justify-center">
                <img src="{{product.images.[0]}}" alt="Product Name" class="w-24 h-24 rounded-lg shadow-md">
            </div>

            <div class="col-span-8">
                <h3 class="text-xl font-semibold">{{product.name}}</h3>
                <p class="text-md text-gray-700 mt-4">Price: ₹{{subtotal}}</p>
                <p class="text-md text-gray-700">Quantity: {{quantity}}</p>
            </div>
         {{/each}} 
        </div>
      </div>
  
      <!-- Shipping Address Section -->
      <div class="mb-12">
        <h2 class="text-2xl font-semibold mb-8">Shipping Address</h2>
        <div class="p-6 bg-gray-50 rounded-lg shadow-inner">
          <p class="text-lg text-gray-800 font-medium">{{order.address.name}}</p>
          <p class="text-lg text-gray-600">{{order.address.addressLine1}}</p>
          <p class="text-lg text-gray-600">{{order.address.addressLine2}}</p>
          <p class="text-lg text-gray-600">{{order.address.city}}, {{order.address.state}}, {{order.address.pincode}}</p>
          <p class="text-lg text-gray-600">{{order.address.country}}</p>
          <p class="text-lg text-gray-600">Phone:  {{order.address.phoneNumber}}</p>
        </div>
      </div>
  
      <!-- Order Tracking Section -->
      <div class="mb-12">
  <h2 class="text-2xl font-semibold mb-8">Order Tracking</h2>
  <div class="relative px-8">
    <div class="absolute inset-0 h-1 bg-gray-300"></div>
    <div class="flex justify-between items-center relative z-10">
      <!-- Pending -->
      <div class="flex flex-col items-center">
        <div class="w-8 h-8 rounded-full flex items-center justify-center 
          {{#if (eq order.status 'Pending') }}bg-yellow-500{{else}}bg-gray-400{{/if}} text-white text-xl">
          ✓
        </div>
        <span class="mt-4 text-lg font-medium">Pending</span>
        <span class="text-sm text-gray-500">{{ order.createdAt}}</span>
      </div>

      <!-- Shipped -->
      <div class="flex flex-col items-center">
        <div class="w-8 h-8 rounded-full flex items-center justify-center 
          {{#if (eq order.status 'Shipped') }}bg-blue-500{{else}}bg-gray-400{{/if}} text-white text-xl">
          ✓
        </div>
        <span class="mt-4 text-lg font-medium">Shipped</span>
        <span id="shipped-date" class="text-sm text-gray-500">
          {{#if order.shippedAt}}
            {{ order.shippedAt}}
          {{else}}
            --
          {{/if}}
        </span>
      </div>

      <!-- Out for Delivery -->
      <div class="flex flex-col items-center">
        <div class="w-8 h-8 rounded-full flex items-center justify-center 
          {{#if (eq order.status 'Out for Delivery') }}bg-yellow-500{{else}}bg-gray-400{{/if}} text-white text-xl">
          •
        </div>
        <span class="mt-4 text-lg font-medium">Out for Delivery</span>
        <span id="out-for-delivery-date" class="text-sm text-gray-500">
          {{#if order.outForDeliveryAt}}
            {{ order.outForDeliveryAt}}
          {{else}}
            --
          {{/if}}
        </span>
      </div>


      <!-- Delivered -->
      <div class="flex flex-col items-center">
        <div class="w-8 h-8 rounded-full flex items-center justify-center 
          {{#if (eq order.status 'Delivered') }}bg-green-500
          {{else if (eq order.status 'Returned') }}bg-red-500
          {{else}}bg-gray-400{{/if}} text-white text-xl">
          {{#if (eq order.status 'Returned') }}R
          {{else}}•{{/if}}
        </div>
        <span class="mt-4 text-lg font-medium">
          {{#if (eq order.status 'Returned') }}Returned{{else}}Delivered{{/if}}
        </span>
        <span id="delivered-date" class="text-sm text-gray-500">
          {{#if order.deliveredAt}}
            {{ order.deliveredAt}}
          {{else}}
            --
          {{/if}}
        </span>
      </div>
    </div>
  </div>
</div>

      <div class="mt-8 flex">
  <button 
    onclick="updateOrderStatus('{{order._id}}', 'Shipped')" 
    class="px-4 py-2 bg-blue-500 text-white rounded-md shadow hover:bg-blue-600 mr-3">
    Mark as Shipped
  </button>
  <button 
    onclick="updateOrderStatus('{{order._id}}', 'Out for Delivery')" 
    class="px-4 py-2 bg-yellow-500 text-white rounded-md shadow hover:bg-yellow-600 mr-3">
    Mark as Out for Delivery
  </button>
  <button 
    onclick="updateOrderStatus('{{order._id}}', 'Delivered')" 
    class="px-4 py-2 bg-green-500 text-white rounded-md shadow hover:bg-green-600 mr-3">
    Mark as Delivered
  </button>
</div>
  
      <!-- Additional Order Details Section -->
      <div class="mb-12 mt-10">
        <h2 class="text-2xl font-semibold mb-8">Order Details</h2>
        <div class="text-lg text-gray-700">
          <p ><span class="font-semibold">Order Date :</span> {{ order.createdAt}}</p>
          <p><span class="font-semibold">Payment Method :</span> {{order.paymentMethod}}</p>
          <p><span class="font-semibold">Order ID :</span> {{order._id}}</p>
        </div>
      </div>
    </div>
  </div>

  <script>
   const notyf = new Notyf({
  duration: 3000,
  position: { x: 'right', y: 'top' },
  types: [
    { type: 'success', background: 'green', duration: 3000 },
    { type: 'error', background: 'red', duration: 3000 },
    { type: 'info', background: 'blue', duration: 3000 },
  ]
});

function formatDateToDDMMYY(dateString) {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${day}/${month}/${year}`;
}


async function updateOrderStatus(orderId, status) {
  try {
    // Check if order is already delivered
    const currentStatus = localStorage.getItem(`orderStatus_${orderId}`);
    if (currentStatus === 'Delivered') {
      notyf.error('This order has already been delivered!');
      return;
    }

    const currentDate = new Date().toISOString();
    const formattedDate = formatDateToDDMMYY(currentDate);

    const response = await fetch(`/admin/orderDetail/${orderId}/status`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ 
        status,
        date: currentDate
      }),
    });

    const result = await response.json();
    if (response.ok) {
      notyf.success(result.message);
      
      // Update localStorage with proper template literals
      localStorage.setItem(`orderStatus_${orderId}`, status);
      
      if (status === 'Shipped') {
        document.getElementById('shipped-date').textContent = formattedDate;
        localStorage.setItem(`shippedDate_${orderId}`, currentDate);
      } else if (status === 'Out for Delivery') {
        document.getElementById('out-for-delivery-date').textContent = formattedDate;
        localStorage.setItem(`outForDeliveryDate_${orderId}`, currentDate);
      } else if (status === 'Delivered') {
        document.getElementById('delivered-date').textContent = formattedDate;
        localStorage.setItem(`deliveredDate_${orderId}`, currentDate);
      }

      updateProgressBar(status);
      
      setTimeout(() => location.reload(), 2000);
    } else {
      notyf.error(result.message || 'Failed to update status');
    }
  } catch (error) {
    console.error("Error updating order status:", error);
    notyf.error("An error occurred while updating the order status.");
  }
}

function updateProgressBar(status) {
  // Reset all stages to gray and remove ticks (✓)
  const stages = document.querySelectorAll('.w-8');
  stages.forEach(stage => {
    stage.classList.remove('bg-blue-500', 'bg-yellow-500', 'bg-green-500');
    stage.innerHTML = '•'; // Reset to dot initially
  });

  // Update the relevant stages based on the status
  if (status === 'Pending') {
    stages[0].classList.add('bg-blue-500'); // Pending
    stages[0].innerHTML = '✓'; // Add tick
  } else if (status === 'Shipped') {
    stages[0].classList.add('bg-blue-500');
    stages[1].classList.add('bg-blue-500'); // Shipped
    stages[1].innerHTML = '✓'; // Add tick
  } else if (status === 'Out for Delivery') {
    stages[0].classList.add('bg-blue-500');
    stages[1].classList.add('bg-blue-500');
    stages[2].classList.add('bg-yellow-500'); // Out for Delivery
    stages[2].innerHTML = '✓'; // Add tick
  } else if (status === 'Delivered') {
    stages[0].classList.add('bg-blue-500');
    stages[1].classList.add('bg-blue-500');
    stages[2].classList.add('bg-yellow-500');
    stages[3].classList.add('bg-green-500'); // Delivered
    stages[3].innerHTML = '✓'; // Add tick
  }
}

// On page load, check if there's a stored status and update the progress bar
window.onload = function() {
  const orderId = '{{order._id}}';
  const savedStatus = localStorage.getItem(`orderStatus_${orderId}`);
  const savedShippedDate = localStorage.getItem(`shippedDate_${orderId}`);
  const savedOutForDeliveryDate = localStorage.getItem(`outForDeliveryDate_${orderId}`);
  const savedDeliveredDate = localStorage.getItem(`deliveredDate_${orderId}`);

  if (savedStatus) {
    updateProgressBar(savedStatus);
  } else {
    const initialStatus = '{{order.status}}';
    updateProgressBar(initialStatus);
  }

  if (savedShippedDate) {
    document.getElementById('shipped-date').textContent = formatDateToDDMMYY(savedShippedDate);
  }
  if (savedOutForDeliveryDate) {
    document.getElementById('out-for-delivery-date').textContent = formatDateToDDMMYY(savedOutForDeliveryDate);
  }
  if (savedDeliveredDate) {
    document.getElementById('delivered-date').textContent = formatDateToDDMMYY(savedDeliveredDate);
  }
    setInterval(checkOrderStatus, 2 * 60 * 1000);
}
  
</script>